package com.halasa.demoshop.app.security.jwt;

import com.halasa.demoshop.app.security.JwtAuthenticationToken;
import com.halasa.demoshop.app.security.Roles;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.proc.BadJOSEException;
import com.nimbusds.jwt.JWT;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.oauth2.sdk.id.ClientID;
import com.nimbusds.oauth2.sdk.id.Issuer;
import com.nimbusds.openid.connect.sdk.Nonce;
import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@Component
public class GoogleIdTokenVerifier implements JwtVerifier {

    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleIdTokenVerifier.class);
    private static final String JWKS_URL = "https://www.googleapis.com/oauth2/v3/certs";

    private static final String AUTHORITIES_KEY = "auth";

    private final Set<String> supportedIssuers;
    private final ClientID clientId;
    private final Nonce expectedNonce;

    @Autowired
    public GoogleIdTokenVerifier(@Value("${security.openIdConnect.google.clientId}") String clientId) {
        // Nonce was generated by a front end asking for an ID token, so we don't know what it was
        this.expectedNonce = null;

        // Google uses two issuer values. See https://developers.google.com/identity/protocols/OpenIDConnect
        this.supportedIssuers = new HashSet<>(Arrays.asList(
                "https://accounts.google.com",
                "accounts.google.com"));
        this.clientId = new ClientID(clientId);
    }

    @Override
    public boolean acceptsIssuer(String issuer) {
        return this.supportedIssuers.contains(issuer);
    }

    public void validate(JWT idToken, String idTokenString, JWTClaimsSet claimsSet) {
        // Issuer has already been validated in acceptsIssuer(), but we don't know which one it was, so just take it from the JWT
        final Issuer issuer = new Issuer(claimsSet.getIssuer());

        final JWSAlgorithm jwsAlg = JWSAlgorithm.parse(idToken.getHeader().getAlgorithm().getName());

        final JWKSet jwkSet;
        try {
            jwkSet = JWKSet.load(new URL(JWKS_URL));
        } catch (ParseException | IOException ex) {
            throw new AuthenticationServiceException("Error getting Google JWK set", ex);
        }

        try {
            IDTokenValidator validator = new IDTokenValidator(issuer, this.clientId, jwsAlg, jwkSet);
            validator.validate(idToken, this.expectedNonce);
        } catch (BadJOSEException | JOSEException ex) {
            throw new BadCredentialsException("JWT is not a valid Google ID token: " + idTokenString, ex);
        }
    }

    public JwtAuthenticationToken getAuthentication(JWT jwt, String jwtString, JWTClaimsSet claimSet) {
        return JwtVerifierUtils.getAuthentication(jwt, jwtString, claimSet, Roles.CUSTOMER);
    }

}
